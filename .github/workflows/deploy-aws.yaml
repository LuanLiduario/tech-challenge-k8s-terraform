name: Deploy AWS Production - FASTFOOD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: EKS-FIAP
  ECR_URI: 039539140324.dkr.ecr.us-east-1.amazonaws.com/fastfood-app

jobs:
  deploy-production:
    name: Deploy EKS Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login ECR
        run: |
          aws ecr get-login-password \
          --region ${{ env.AWS_REGION }} | \
          docker login --username AWS \
          --password-stdin \
          ${{ env.ECR_URI }}

      - name: Build and Push Docker Image
        run: |
          docker build -t fastfood-app .
          docker tag fastfood-app:latest ${{ env.ECR_URI }}:latest
          docker push ${{ env.ECR_URI }}:latest

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ env.CLUSTER_NAME }}

      - name: Create Secrets in Kubernetes
        run: |
          kubectl create secret generic fast-food-secrets \
            --from-literal=DB_USER=${{ secrets.DB_USER }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --from-literal=SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes Resources
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl apply -f k8s/migrate-job.yaml

      - name: Run Database Migrations Job
        run: |
          kubectl apply -f k8s/migrate-job.yaml
          kubectl wait --for=condition=complete --timeout=60s job/fastfood-migrate-job || {
            echo "Migration job failed or timed out" && kubectl logs job/fastfood-migrate-job && exit 1;
          }
          kubectl delete job fastfood-migrate-job || true
